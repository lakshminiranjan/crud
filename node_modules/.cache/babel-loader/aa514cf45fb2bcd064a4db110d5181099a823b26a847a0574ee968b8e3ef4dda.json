{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\megr-app\\\\mefh_app\\\\src\\\\components\\\\contacts\\\\ContactList\\\\ContactList.jsx\",\n  _s = $RefreshSig$();\n// import React, {useState , initialState , useEffect} from 'react';\n// import {Link, useAsyncValue} from 'react-router-dom';\n// import {ContactService} from '../../../services/ContactService';\n// import Spinner from '../../Spinner/Spinner';\n\n// function ContactList() {\n\n//     const [state, setState] = useState(initialState, {\n//         loading: false,\n//         contacts: [],\n//         errorMessage: ''\n//     });\n\n//     useEffect(() => {\n//         async function handleResp() {\n//             try {\n//                 setState(useAsyncValue, { ...state, loading: true });\n//                 let response = await ContactService.getAllContacts();\n//                 setState(useAsyncValue, {\n//                     ...state,\n//                     loading: false,\n//                     contacts: response.data\n//                 });\n//                 // console.log(response.data);\n//             }\n//             catch (error) {\n//                 setState(useAsyncValue, {\n//                     ...state,\n//                     loading: false,\n//                     errorMessage: error.message\n//                 });\n//             }\n//         };\n\n//         handleResp();\n//     }, []);\n\n//     let { loading, contacts, errorMessage } = state;\n\n//     return (\n\n//     );\n// }\n// export default ContactList;\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { ContactService } from '../../../services/ContactService';\nimport Spinner from '../../Spinner/Spinner';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ContactList() {\n  _s();\n  const [state, setState] = useState({\n    loading: false,\n    contacts: [],\n    errorMessage: ''\n  });\n  useEffect(() => {\n    async function handleResp() {\n      try {\n        setState({\n          ...state,\n          loading: true\n        });\n        let response = await ContactService.getAllContacts();\n        setState({\n          ...state,\n          loading: false,\n          contacts: response.data\n        });\n        // console.log(response.data);\n      } catch (error) {\n        setState({\n          ...state,\n          loading: false,\n          errorMessage: error.message\n        });\n      }\n    }\n    handleResp();\n  }, []);\n  let {\n    loading,\n    contacts,\n    errorMessage\n  } = state;\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n}\n_s(ContactList, \"w1YuuyWuLvQANwtROsh+dyxFZYs=\");\n_c = ContactList;\nexport default ContactList;\nvar _c;\n$RefreshReg$(_c, \"ContactList\");","map":{"version":3,"names":["React","useState","useEffect","Link","ContactService","Spinner","jsxDEV","_jsxDEV","ContactList","_s","state","setState","loading","contacts","errorMessage","handleResp","response","getAllContacts","data","error","message","Fragment","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/DELL/Desktop/megr-app/mefh_app/src/components/contacts/ContactList/ContactList.jsx"],"sourcesContent":["// import React, {useState , initialState , useEffect} from 'react';\r\n// import {Link, useAsyncValue} from 'react-router-dom';\r\n// import {ContactService} from '../../../services/ContactService';\r\n// import Spinner from '../../Spinner/Spinner';\r\n\r\n\r\n\r\n// function ContactList() {\r\n\r\n//     const [state, setState] = useState(initialState, {\r\n//         loading: false,\r\n//         contacts: [],\r\n//         errorMessage: ''\r\n//     });\r\n\r\n\r\n//     useEffect(() => {\r\n//         async function handleResp() {\r\n//             try {\r\n//                 setState(useAsyncValue, { ...state, loading: true });\r\n//                 let response = await ContactService.getAllContacts();\r\n//                 setState(useAsyncValue, {\r\n//                     ...state,\r\n//                     loading: false,\r\n//                     contacts: response.data\r\n//                 });\r\n//                 // console.log(response.data);\r\n//             }\r\n//             catch (error) {\r\n//                 setState(useAsyncValue, {\r\n//                     ...state,\r\n//                     loading: false,\r\n//                     errorMessage: error.message\r\n//                 });\r\n//             }\r\n//         };\r\n\r\n//         handleResp();\r\n//     }, []);\r\n\r\n\r\n//     let { loading, contacts, errorMessage } = state;\r\n\r\n//     return (\r\n        \r\n//     );\r\n// }\r\n// export default ContactList;\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { ContactService } from '../../../services/ContactService';\r\nimport Spinner from '../../Spinner/Spinner';\r\n\r\nfunction ContactList() {\r\n  const [state, setState] = useState({\r\n    loading: false,\r\n    contacts: [],\r\n    errorMessage: ''\r\n  });\r\n\r\n  useEffect(() => {\r\n    async function handleResp() {\r\n      try {\r\n        setState({ ...state, loading: true });\r\n        let response = await ContactService.getAllContacts();\r\n        setState({\r\n          ...state,\r\n          loading: false,\r\n          contacts: response.data\r\n        });\r\n        // console.log(response.data);\r\n      } catch (error) {\r\n        setState({\r\n          ...state,\r\n          loading: false,\r\n          errorMessage: error.message\r\n        });\r\n      }\r\n    }\r\n\r\n    handleResp();\r\n  }, []);\r\n\r\n  let { loading, contacts, errorMessage } = state;\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {/* Rest of your component JSX code */}\r\n      \r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default ContactList;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAIA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;;AAEA;;AAEA;AACA;AACA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,IAAI,QAAQ,kBAAkB;AACvC,SAASC,cAAc,QAAQ,kCAAkC;AACjE,OAAOC,OAAO,MAAM,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACrB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC;IACjCW,OAAO,EAAE,KAAK;IACdC,QAAQ,EAAE,EAAE;IACZC,YAAY,EAAE;EAChB,CAAC,CAAC;EAEFZ,SAAS,CAAC,MAAM;IACd,eAAea,UAAUA,CAAA,EAAG;MAC1B,IAAI;QACFJ,QAAQ,CAAC;UAAE,GAAGD,KAAK;UAAEE,OAAO,EAAE;QAAK,CAAC,CAAC;QACrC,IAAII,QAAQ,GAAG,MAAMZ,cAAc,CAACa,cAAc,CAAC,CAAC;QACpDN,QAAQ,CAAC;UACP,GAAGD,KAAK;UACRE,OAAO,EAAE,KAAK;UACdC,QAAQ,EAAEG,QAAQ,CAACE;QACrB,CAAC,CAAC;QACF;MACF,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdR,QAAQ,CAAC;UACP,GAAGD,KAAK;UACRE,OAAO,EAAE,KAAK;UACdE,YAAY,EAAEK,KAAK,CAACC;QACtB,CAAC,CAAC;MACJ;IACF;IAEAL,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC;EAEN,IAAI;IAAEH,OAAO;IAAEC,QAAQ;IAAEC;EAAa,CAAC,GAAGJ,KAAK;EAE/C,oBACEH,OAAA,CAACP,KAAK,CAACqB,QAAQ;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAGC,CAAC;AAErB;AAAChB,EAAA,CAtCQD,WAAW;AAAAkB,EAAA,GAAXlB,WAAW;AAwCpB,eAAeA,WAAW;AAAC,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}